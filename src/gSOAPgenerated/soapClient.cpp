/* soapClient.cpp
   Generated by gSOAP 2.7.12 from ..\gSoapInput\TpcServerSoap.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.7.12 2024-01-29 10:46:26 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__GetInterfaceVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, int &version)
{	struct ns__GetInterfaceVersion soap_tmp_ns__GetInterfaceVersion;
	struct ns__GetInterfaceVersionResponse *soap_tmp_ns__GetInterfaceVersionResponse;
	soap->encodingStyle = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__GetInterfaceVersion(soap, &soap_tmp_ns__GetInterfaceVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetInterfaceVersion(soap, &soap_tmp_ns__GetInterfaceVersion, "ns:GetInterfaceVersion", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetInterfaceVersion(soap, &soap_tmp_ns__GetInterfaceVersion, "ns:GetInterfaceVersion", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&version)
		return soap_closesock(soap);
	soap_default_int(soap, &version);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__GetInterfaceVersionResponse = soap_get_ns__GetInterfaceVersionResponse(soap, NULL, "ns:GetInterfaceVersionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	version = soap_tmp_ns__GetInterfaceVersionResponse->version;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__ResetConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns__DummyResponse *dummyOut)
{	struct ns__ResetConfiguration soap_tmp_ns__ResetConfiguration;
	soap->encodingStyle = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__ResetConfiguration(soap, &soap_tmp_ns__ResetConfiguration);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__ResetConfiguration(soap, &soap_tmp_ns__ResetConfiguration, "ns:ResetConfiguration", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__ResetConfiguration(soap, &soap_tmp_ns__ResetConfiguration, "ns:ResetConfiguration", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!dummyOut)
		return soap_closesock(soap);
	soap_default_ns__DummyResponse(soap, dummyOut);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__DummyResponse(soap, dummyOut, "ns:DummyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__AcquireDeviceLock(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns__DummyResponse *dummyOut)
{	struct ns__AcquireDeviceLock soap_tmp_ns__AcquireDeviceLock;
	soap->encodingStyle = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__AcquireDeviceLock(soap, &soap_tmp_ns__AcquireDeviceLock);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__AcquireDeviceLock(soap, &soap_tmp_ns__AcquireDeviceLock, "ns:AcquireDeviceLock", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__AcquireDeviceLock(soap, &soap_tmp_ns__AcquireDeviceLock, "ns:AcquireDeviceLock", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!dummyOut)
		return soap_closesock(soap);
	soap_default_ns__DummyResponse(soap, dummyOut);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__DummyResponse(soap, dummyOut, "ns:DummyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__ReleaseDeviceLock(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns__DummyResponse *dummyOut)
{	struct ns__ReleaseDeviceLock soap_tmp_ns__ReleaseDeviceLock;
	soap->encodingStyle = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__ReleaseDeviceLock(soap, &soap_tmp_ns__ReleaseDeviceLock);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__ReleaseDeviceLock(soap, &soap_tmp_ns__ReleaseDeviceLock, "ns:ReleaseDeviceLock", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__ReleaseDeviceLock(soap, &soap_tmp_ns__ReleaseDeviceLock, "ns:ReleaseDeviceLock", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!dummyOut)
		return soap_closesock(soap);
	soap_default_ns__DummyResponse(soap, dummyOut);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__DummyResponse(soap, dummyOut, "ns:DummyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__GetClusterConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns__ClusterConfiguration &clusters)
{	struct ns__GetClusterConfiguration soap_tmp_ns__GetClusterConfiguration;
	soap->encodingStyle = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__GetClusterConfiguration(soap, &soap_tmp_ns__GetClusterConfiguration);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetClusterConfiguration(soap, &soap_tmp_ns__GetClusterConfiguration, "ns:GetClusterConfiguration", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetClusterConfiguration(soap, &soap_tmp_ns__GetClusterConfiguration, "ns:GetClusterConfiguration", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&clusters)
		return soap_closesock(soap);
	soap_default_ns__ClusterConfiguration(soap, &clusters);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__ClusterConfiguration(soap, &clusters, "ns:ClusterConfiguration", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__SetClusterConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns__ClusterConfiguration clusters, struct ns__DummyResponse *dummyOut)
{	struct ns__SetClusterConfiguration soap_tmp_ns__SetClusterConfiguration;
	soap->encodingStyle = "";
	soap_tmp_ns__SetClusterConfiguration.clusters = clusters;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__SetClusterConfiguration(soap, &soap_tmp_ns__SetClusterConfiguration);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__SetClusterConfiguration(soap, &soap_tmp_ns__SetClusterConfiguration, "ns:SetClusterConfiguration", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__SetClusterConfiguration(soap, &soap_tmp_ns__SetClusterConfiguration, "ns:SetClusterConfiguration", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!dummyOut)
		return soap_closesock(soap);
	soap_default_ns__DummyResponse(soap, dummyOut);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__DummyResponse(soap, dummyOut, "ns:DummyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__GetHardwareInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns__HardwareInfo &hardwareInfo)
{	struct ns__GetHardwareInfo soap_tmp_ns__GetHardwareInfo;
	soap->encodingStyle = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__GetHardwareInfo(soap, &soap_tmp_ns__GetHardwareInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetHardwareInfo(soap, &soap_tmp_ns__GetHardwareInfo, "ns:GetHardwareInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetHardwareInfo(soap, &soap_tmp_ns__GetHardwareInfo, "ns:GetHardwareInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&hardwareInfo)
		return soap_closesock(soap);
	soap_default_ns__HardwareInfo(soap, &hardwareInfo);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__HardwareInfo(soap, &hardwareInfo, "ns:HardwareInfo", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__SetOneParameter(struct soap *soap, const char *soap_endpoint, const char *soap_action, int boardAddress, int inputNumber, int parameterIndex, double value, struct ns__SetOneParameterResult &result)
{	struct ns__SetOneParameter soap_tmp_ns__SetOneParameter;
	soap->encodingStyle = "";
	soap_tmp_ns__SetOneParameter.boardAddress = boardAddress;
	soap_tmp_ns__SetOneParameter.inputNumber = inputNumber;
	soap_tmp_ns__SetOneParameter.parameterIndex = parameterIndex;
	soap_tmp_ns__SetOneParameter.value = value;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__SetOneParameter(soap, &soap_tmp_ns__SetOneParameter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__SetOneParameter(soap, &soap_tmp_ns__SetOneParameter, "ns:SetOneParameter", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__SetOneParameter(soap, &soap_tmp_ns__SetOneParameter, "ns:SetOneParameter", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_ns__SetOneParameterResult(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__SetOneParameterResult(soap, &result, "ns:SetOneParameterResult", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__SetMultipleParameters(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__ParameterList parameters, ns__SetParameterResultList &result)
{	struct ns__SetMultipleParameters soap_tmp_ns__SetMultipleParameters;
	struct ns__SetMultipleParametersResponse *soap_tmp_ns__SetMultipleParametersResponse;
	soap->encodingStyle = "";
	soap_tmp_ns__SetMultipleParameters.parameters = parameters;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__SetMultipleParameters(soap, &soap_tmp_ns__SetMultipleParameters);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__SetMultipleParameters(soap, &soap_tmp_ns__SetMultipleParameters, "ns:SetMultipleParameters", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__SetMultipleParameters(soap, &soap_tmp_ns__SetMultipleParameters, "ns:SetMultipleParameters", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	result.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__SetMultipleParametersResponse = soap_get_ns__SetMultipleParametersResponse(soap, NULL, "ns:SetMultipleParametersResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns__SetMultipleParametersResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__GetAllCurrentParameters(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__ParameterList &parameters)
{	struct ns__GetAllCurrentParameters soap_tmp_ns__GetAllCurrentParameters;
	struct ns__GetAllCurrentParametersResponse *soap_tmp_ns__GetAllCurrentParametersResponse;
	soap->encodingStyle = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__GetAllCurrentParameters(soap, &soap_tmp_ns__GetAllCurrentParameters);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetAllCurrentParameters(soap, &soap_tmp_ns__GetAllCurrentParameters, "ns:GetAllCurrentParameters", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetAllCurrentParameters(soap, &soap_tmp_ns__GetAllCurrentParameters, "ns:GetAllCurrentParameters", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&parameters)
		return soap_closesock(soap);
	parameters.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__GetAllCurrentParametersResponse = soap_get_ns__GetAllCurrentParametersResponse(soap, NULL, "ns:GetAllCurrentParametersResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	parameters = soap_tmp_ns__GetAllCurrentParametersResponse->parameters;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__GetAllPreviousParameters(struct soap *soap, const char *soap_endpoint, const char *soap_action, int currentMeasurementNumber, ns__ParameterList &parameters)
{	struct ns__GetAllPreviousParameters soap_tmp_ns__GetAllPreviousParameters;
	struct ns__GetAllPreviousParametersResponse *soap_tmp_ns__GetAllPreviousParametersResponse;
	soap->encodingStyle = "";
	soap_tmp_ns__GetAllPreviousParameters.currentMeasurementNumber = currentMeasurementNumber;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__GetAllPreviousParameters(soap, &soap_tmp_ns__GetAllPreviousParameters);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetAllPreviousParameters(soap, &soap_tmp_ns__GetAllPreviousParameters, "ns:GetAllPreviousParameters", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetAllPreviousParameters(soap, &soap_tmp_ns__GetAllPreviousParameters, "ns:GetAllPreviousParameters", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&parameters)
		return soap_closesock(soap);
	parameters.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__GetAllPreviousParametersResponse = soap_get_ns__GetAllPreviousParametersResponse(soap, NULL, "ns:GetAllPreviousParametersResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	parameters = soap_tmp_ns__GetAllPreviousParametersResponse->parameters;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__SetAttributes(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__AttributeList values, struct ns__DummyResponse *dummyOut)
{	struct ns__SetAttributes soap_tmp_ns__SetAttributes;
	soap->encodingStyle = "";
	soap_tmp_ns__SetAttributes.values = values;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__SetAttributes(soap, &soap_tmp_ns__SetAttributes);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__SetAttributes(soap, &soap_tmp_ns__SetAttributes, "ns:SetAttributes", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__SetAttributes(soap, &soap_tmp_ns__SetAttributes, "ns:SetAttributes", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!dummyOut)
		return soap_closesock(soap);
	soap_default_ns__DummyResponse(soap, dummyOut);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__DummyResponse(soap, dummyOut, "ns:DummyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__GetAllCurrentAttributes(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__AttributeList &result)
{	struct ns__GetAllCurrentAttributes soap_tmp_ns__GetAllCurrentAttributes;
	struct ns__GetAllCurrentAttributesResponse *soap_tmp_ns__GetAllCurrentAttributesResponse;
	soap->encodingStyle = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__GetAllCurrentAttributes(soap, &soap_tmp_ns__GetAllCurrentAttributes);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetAllCurrentAttributes(soap, &soap_tmp_ns__GetAllCurrentAttributes, "ns:GetAllCurrentAttributes", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetAllCurrentAttributes(soap, &soap_tmp_ns__GetAllCurrentAttributes, "ns:GetAllCurrentAttributes", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	result.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__GetAllCurrentAttributesResponse = soap_get_ns__GetAllCurrentAttributesResponse(soap, NULL, "ns:GetAllCurrentAttributesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns__GetAllCurrentAttributesResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__GetAllPreviousAttributes(struct soap *soap, const char *soap_endpoint, const char *soap_action, int currentMeasurementNumber, ns__AttributeList &result)
{	struct ns__GetAllPreviousAttributes soap_tmp_ns__GetAllPreviousAttributes;
	struct ns__GetAllPreviousAttributesResponse *soap_tmp_ns__GetAllPreviousAttributesResponse;
	soap->encodingStyle = "";
	soap_tmp_ns__GetAllPreviousAttributes.currentMeasurementNumber = currentMeasurementNumber;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__GetAllPreviousAttributes(soap, &soap_tmp_ns__GetAllPreviousAttributes);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetAllPreviousAttributes(soap, &soap_tmp_ns__GetAllPreviousAttributes, "ns:GetAllPreviousAttributes", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetAllPreviousAttributes(soap, &soap_tmp_ns__GetAllPreviousAttributes, "ns:GetAllPreviousAttributes", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	result.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__GetAllPreviousAttributesResponse = soap_get_ns__GetAllPreviousAttributesResponse(soap, NULL, "ns:GetAllPreviousAttributesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns__GetAllPreviousAttributesResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__GetSerTrgProtocol(struct soap *soap, const char *soap_endpoint, const char *soap_action, int boardAddress, int &prot)
{	struct ns__GetSerTrgProtocol soap_tmp_ns__GetSerTrgProtocol;
	struct ns__GetSerTrgProtocolResponse *soap_tmp_ns__GetSerTrgProtocolResponse;
	soap->encodingStyle = "";
	soap_tmp_ns__GetSerTrgProtocol.boardAddress = boardAddress;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__GetSerTrgProtocol(soap, &soap_tmp_ns__GetSerTrgProtocol);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetSerTrgProtocol(soap, &soap_tmp_ns__GetSerTrgProtocol, "ns:GetSerTrgProtocol", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetSerTrgProtocol(soap, &soap_tmp_ns__GetSerTrgProtocol, "ns:GetSerTrgProtocol", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&prot)
		return soap_closesock(soap);
	soap_default_int(soap, &prot);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__GetSerTrgProtocolResponse = soap_get_ns__GetSerTrgProtocolResponse(soap, NULL, "ns:GetSerTrgProtocolResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	prot = soap_tmp_ns__GetSerTrgProtocolResponse->prot;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__ResetSerTrg(struct soap *soap, const char *soap_endpoint, const char *soap_action, int boardAddress, struct ns__DummyResponse *dummyOut)
{	struct ns__ResetSerTrg soap_tmp_ns__ResetSerTrg;
	soap->encodingStyle = "";
	soap_tmp_ns__ResetSerTrg.boardAddress = boardAddress;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__ResetSerTrg(soap, &soap_tmp_ns__ResetSerTrg);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__ResetSerTrg(soap, &soap_tmp_ns__ResetSerTrg, "ns:ResetSerTrg", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__ResetSerTrg(soap, &soap_tmp_ns__ResetSerTrg, "ns:ResetSerTrg", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!dummyOut)
		return soap_closesock(soap);
	soap_default_ns__DummyResponse(soap, dummyOut);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__DummyResponse(soap, dummyOut, "ns:DummyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__SetI2CTrigger(struct soap *soap, const char *soap_endpoint, const char *soap_action, int boardAddress, struct ns__I2CTriggerSettings settings, struct ns__DummyResponse *dummyOut)
{	struct ns__SetI2CTrigger soap_tmp_ns__SetI2CTrigger;
	soap->encodingStyle = "";
	soap_tmp_ns__SetI2CTrigger.boardAddress = boardAddress;
	soap_tmp_ns__SetI2CTrigger.settings = settings;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__SetI2CTrigger(soap, &soap_tmp_ns__SetI2CTrigger);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__SetI2CTrigger(soap, &soap_tmp_ns__SetI2CTrigger, "ns:SetI2CTrigger", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__SetI2CTrigger(soap, &soap_tmp_ns__SetI2CTrigger, "ns:SetI2CTrigger", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!dummyOut)
		return soap_closesock(soap);
	soap_default_ns__DummyResponse(soap, dummyOut);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__DummyResponse(soap, dummyOut, "ns:DummyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__GetI2CTrigger(struct soap *soap, const char *soap_endpoint, const char *soap_action, int boardAddress, struct ns__I2CTriggerSettings &settings)
{	struct ns__GetI2CTrigger soap_tmp_ns__GetI2CTrigger;
	soap->encodingStyle = "";
	soap_tmp_ns__GetI2CTrigger.boardAddress = boardAddress;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__GetI2CTrigger(soap, &soap_tmp_ns__GetI2CTrigger);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetI2CTrigger(soap, &soap_tmp_ns__GetI2CTrigger, "ns:GetI2CTrigger", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetI2CTrigger(soap, &soap_tmp_ns__GetI2CTrigger, "ns:GetI2CTrigger", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&settings)
		return soap_closesock(soap);
	soap_default_ns__I2CTriggerSettings(soap, &settings);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__I2CTriggerSettings(soap, &settings, "ns:I2CTriggerSettings", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__SetCANTrigger(struct soap *soap, const char *soap_endpoint, const char *soap_action, int boardAddress, struct ns__CANTriggerSettings settings, struct ns__DummyResponse *dummyOut)
{	struct ns__SetCANTrigger soap_tmp_ns__SetCANTrigger;
	soap->encodingStyle = "";
	soap_tmp_ns__SetCANTrigger.boardAddress = boardAddress;
	soap_tmp_ns__SetCANTrigger.settings = settings;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__SetCANTrigger(soap, &soap_tmp_ns__SetCANTrigger);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__SetCANTrigger(soap, &soap_tmp_ns__SetCANTrigger, "ns:SetCANTrigger", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__SetCANTrigger(soap, &soap_tmp_ns__SetCANTrigger, "ns:SetCANTrigger", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!dummyOut)
		return soap_closesock(soap);
	soap_default_ns__DummyResponse(soap, dummyOut);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__DummyResponse(soap, dummyOut, "ns:DummyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__GetCANTrigger(struct soap *soap, const char *soap_endpoint, const char *soap_action, int boardAddress, struct ns__CANTriggerSettings &settings)
{	struct ns__GetCANTrigger soap_tmp_ns__GetCANTrigger;
	soap->encodingStyle = "";
	soap_tmp_ns__GetCANTrigger.boardAddress = boardAddress;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__GetCANTrigger(soap, &soap_tmp_ns__GetCANTrigger);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetCANTrigger(soap, &soap_tmp_ns__GetCANTrigger, "ns:GetCANTrigger", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetCANTrigger(soap, &soap_tmp_ns__GetCANTrigger, "ns:GetCANTrigger", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&settings)
		return soap_closesock(soap);
	soap_default_ns__CANTriggerSettings(soap, &settings);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__CANTriggerSettings(soap, &settings, "ns:CANTriggerSettings", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__GetAllCurrentAssociations(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns__AssociationRowList &result)
{	struct ns__GetAllCurrentAssociations soap_tmp_ns__GetAllCurrentAssociations;
	struct ns__GetAllCurrentAssociationsResponse *soap_tmp_ns__GetAllCurrentAssociationsResponse;
	soap->encodingStyle = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__GetAllCurrentAssociations(soap, &soap_tmp_ns__GetAllCurrentAssociations);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetAllCurrentAssociations(soap, &soap_tmp_ns__GetAllCurrentAssociations, "ns:GetAllCurrentAssociations", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetAllCurrentAssociations(soap, &soap_tmp_ns__GetAllCurrentAssociations, "ns:GetAllCurrentAssociations", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_ns__AssociationRowList(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__GetAllCurrentAssociationsResponse = soap_get_ns__GetAllCurrentAssociationsResponse(soap, NULL, "ns:GetAllCurrentAssociationsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns__GetAllCurrentAssociationsResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__GetAllPreviousAssociations(struct soap *soap, const char *soap_endpoint, const char *soap_action, int currentMeasurementNumber, struct ns__AssociationRowList &result)
{	struct ns__GetAllPreviousAssociations soap_tmp_ns__GetAllPreviousAssociations;
	struct ns__GetAllPreviousAssociationsResponse *soap_tmp_ns__GetAllPreviousAssociationsResponse;
	soap->encodingStyle = "";
	soap_tmp_ns__GetAllPreviousAssociations.currentMeasurementNumber = currentMeasurementNumber;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__GetAllPreviousAssociations(soap, &soap_tmp_ns__GetAllPreviousAssociations);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetAllPreviousAssociations(soap, &soap_tmp_ns__GetAllPreviousAssociations, "ns:GetAllPreviousAssociations", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetAllPreviousAssociations(soap, &soap_tmp_ns__GetAllPreviousAssociations, "ns:GetAllPreviousAssociations", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_ns__AssociationRowList(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__GetAllPreviousAssociationsResponse = soap_get_ns__GetAllPreviousAssociationsResponse(soap, NULL, "ns:GetAllPreviousAssociationsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns__GetAllPreviousAssociationsResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__SetAssociations(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns__AssociationRowList associations, struct ns__DummyResponse *dummyOut)
{	struct ns__SetAssociations soap_tmp_ns__SetAssociations;
	soap->encodingStyle = "";
	soap_tmp_ns__SetAssociations.associations = associations;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__SetAssociations(soap, &soap_tmp_ns__SetAssociations);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__SetAssociations(soap, &soap_tmp_ns__SetAssociations, "ns:SetAssociations", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__SetAssociations(soap, &soap_tmp_ns__SetAssociations, "ns:SetAssociations", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!dummyOut)
		return soap_closesock(soap);
	soap_default_ns__DummyResponse(soap, dummyOut);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__DummyResponse(soap, dummyOut, "ns:DummyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__GetGPSLogList(struct soap *soap, const char *soap_endpoint, const char *soap_action, int from, int to, struct ns__GPSLogList &result)
{	struct ns__GetGPSLogList soap_tmp_ns__GetGPSLogList;
	struct ns__GetGPSLogListResponse *soap_tmp_ns__GetGPSLogListResponse;
	soap->encodingStyle = "";
	soap_tmp_ns__GetGPSLogList.from = from;
	soap_tmp_ns__GetGPSLogList.to = to;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__GetGPSLogList(soap, &soap_tmp_ns__GetGPSLogList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetGPSLogList(soap, &soap_tmp_ns__GetGPSLogList, "ns:GetGPSLogList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetGPSLogList(soap, &soap_tmp_ns__GetGPSLogList, "ns:GetGPSLogList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_ns__GPSLogList(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__GetGPSLogListResponse = soap_get_ns__GetGPSLogListResponse(soap, NULL, "ns:GetGPSLogListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns__GetGPSLogListResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__WriteDev(struct soap *soap, const char *soap_endpoint, const char *soap_action, int boardAddress, int type, ns__DeviceData data, unsigned int aux1, unsigned int aux2, struct ns__DummyResponse *dummyOut)
{	struct ns__WriteDev soap_tmp_ns__WriteDev;
	soap->encodingStyle = "";
	soap_tmp_ns__WriteDev.boardAddress = boardAddress;
	soap_tmp_ns__WriteDev.type = type;
	soap_tmp_ns__WriteDev.data = data;
	soap_tmp_ns__WriteDev.aux1 = aux1;
	soap_tmp_ns__WriteDev.aux2 = aux2;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__WriteDev(soap, &soap_tmp_ns__WriteDev);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__WriteDev(soap, &soap_tmp_ns__WriteDev, "ns:WriteDev", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__WriteDev(soap, &soap_tmp_ns__WriteDev, "ns:WriteDev", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!dummyOut)
		return soap_closesock(soap);
	soap_default_ns__DummyResponse(soap, dummyOut);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__DummyResponse(soap, dummyOut, "ns:DummyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__ReadDev(struct soap *soap, const char *soap_endpoint, const char *soap_action, int boardAddress, int type, unsigned int count, unsigned int aux1, unsigned int aux2, ns__DeviceData &result)
{	struct ns__ReadDev soap_tmp_ns__ReadDev;
	struct ns__ReadDevResponse *soap_tmp_ns__ReadDevResponse;
	soap->encodingStyle = "";
	soap_tmp_ns__ReadDev.boardAddress = boardAddress;
	soap_tmp_ns__ReadDev.type = type;
	soap_tmp_ns__ReadDev.count = count;
	soap_tmp_ns__ReadDev.aux1 = aux1;
	soap_tmp_ns__ReadDev.aux2 = aux2;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__ReadDev(soap, &soap_tmp_ns__ReadDev);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__ReadDev(soap, &soap_tmp_ns__ReadDev, "ns:ReadDev", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__ReadDev(soap, &soap_tmp_ns__ReadDev, "ns:ReadDev", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	result.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__ReadDevResponse = soap_get_ns__ReadDevResponse(soap, NULL, "ns:ReadDevResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns__ReadDevResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__ReadWriteTwi(struct soap *soap, const char *soap_endpoint, const char *soap_action, int boardAddress, unsigned int amplifier, ns__DeviceData data, ns__DeviceData &result)
{	struct ns__ReadWriteTwi soap_tmp_ns__ReadWriteTwi;
	struct ns__ReadWriteTwiResponse *soap_tmp_ns__ReadWriteTwiResponse;
	soap->encodingStyle = "";
	soap_tmp_ns__ReadWriteTwi.boardAddress = boardAddress;
	soap_tmp_ns__ReadWriteTwi.amplifier = amplifier;
	soap_tmp_ns__ReadWriteTwi.data = data;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__ReadWriteTwi(soap, &soap_tmp_ns__ReadWriteTwi);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__ReadWriteTwi(soap, &soap_tmp_ns__ReadWriteTwi, "ns:ReadWriteTwi", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__ReadWriteTwi(soap, &soap_tmp_ns__ReadWriteTwi, "ns:ReadWriteTwi", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	result.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__ReadWriteTwiResponse = soap_get_ns__ReadWriteTwiResponse(soap, NULL, "ns:ReadWriteTwiResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns__ReadWriteTwiResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__PrepareStart(struct soap *soap, const char *soap_endpoint, const char *soap_action, double *delayTime)
{	struct ns__PrepareStart soap_tmp_ns__PrepareStart;
	struct ns__PrepareStartResponse *soap_tmp_ns__PrepareStartResponse;
	soap->encodingStyle = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__PrepareStart(soap, &soap_tmp_ns__PrepareStart);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__PrepareStart(soap, &soap_tmp_ns__PrepareStart, "ns:PrepareStart", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__PrepareStart(soap, &soap_tmp_ns__PrepareStart, "ns:PrepareStart", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!delayTime)
		return soap_closesock(soap);
	soap_default_double(soap, delayTime);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__PrepareStartResponse = soap_get_ns__PrepareStartResponse(soap, NULL, "ns:PrepareStartResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (delayTime && soap_tmp_ns__PrepareStartResponse->delayTime)
		*delayTime = *soap_tmp_ns__PrepareStartResponse->delayTime;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__SetStartInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns__DateTime startTime, int measurementNr, struct ns__DummyResponse *dummyOut)
{	struct ns__SetStartInfo soap_tmp_ns__SetStartInfo;
	soap->encodingStyle = "";
	soap_tmp_ns__SetStartInfo.startTime = startTime;
	soap_tmp_ns__SetStartInfo.measurementNr = measurementNr;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__SetStartInfo(soap, &soap_tmp_ns__SetStartInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__SetStartInfo(soap, &soap_tmp_ns__SetStartInfo, "ns:SetStartInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__SetStartInfo(soap, &soap_tmp_ns__SetStartInfo, "ns:SetStartInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!dummyOut)
		return soap_closesock(soap);
	soap_default_ns__DummyResponse(soap, dummyOut);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__DummyResponse(soap, dummyOut, "ns:DummyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__ExecuteCommand(struct soap *soap, const char *soap_endpoint, const char *soap_action, int command, struct ns__DummyResponse *dummyOut)
{	struct ns__ExecuteCommand soap_tmp_ns__ExecuteCommand;
	soap->encodingStyle = "";
	soap_tmp_ns__ExecuteCommand.command = command;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__ExecuteCommand(soap, &soap_tmp_ns__ExecuteCommand);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__ExecuteCommand(soap, &soap_tmp_ns__ExecuteCommand, "ns:ExecuteCommand", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__ExecuteCommand(soap, &soap_tmp_ns__ExecuteCommand, "ns:ExecuteCommand", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!dummyOut)
		return soap_closesock(soap);
	soap_default_ns__DummyResponse(soap, dummyOut);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__DummyResponse(soap, dummyOut, "ns:DummyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__StartCalibration(struct soap *soap, const char *soap_endpoint, const char *soap_action, int type, struct ns__DummyResponse *dummyOut)
{	struct ns__StartCalibration soap_tmp_ns__StartCalibration;
	soap->encodingStyle = "";
	soap_tmp_ns__StartCalibration.type = type;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__StartCalibration(soap, &soap_tmp_ns__StartCalibration);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__StartCalibration(soap, &soap_tmp_ns__StartCalibration, "ns:StartCalibration", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__StartCalibration(soap, &soap_tmp_ns__StartCalibration, "ns:StartCalibration", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!dummyOut)
		return soap_closesock(soap);
	soap_default_ns__DummyResponse(soap, dummyOut);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__DummyResponse(soap, dummyOut, "ns:DummyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__GetStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns__Status &status)
{	struct ns__GetStatus soap_tmp_ns__GetStatus;
	soap->encodingStyle = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__GetStatus(soap, &soap_tmp_ns__GetStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetStatus(soap, &soap_tmp_ns__GetStatus, "ns:GetStatus", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetStatus(soap, &soap_tmp_ns__GetStatus, "ns:GetStatus", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&status)
		return soap_closesock(soap);
	soap_default_ns__Status(soap, &status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__Status(soap, &status, "ns:Status", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__WaitForStatusChange(struct soap *soap, const char *soap_endpoint, const char *soap_action, unsigned int eventCounter, struct ns__Status &status)
{	struct ns__WaitForStatusChange soap_tmp_ns__WaitForStatusChange;
	soap->encodingStyle = "";
	soap_tmp_ns__WaitForStatusChange.eventCounter = eventCounter;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__WaitForStatusChange(soap, &soap_tmp_ns__WaitForStatusChange);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__WaitForStatusChange(soap, &soap_tmp_ns__WaitForStatusChange, "ns:WaitForStatusChange", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__WaitForStatusChange(soap, &soap_tmp_ns__WaitForStatusChange, "ns:WaitForStatusChange", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&status)
		return soap_closesock(soap);
	soap_default_ns__Status(soap, &status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__Status(soap, &status, "ns:Status", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__LeaveWaitStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns__DummyResponse *dummyOut)
{	struct ns__LeaveWaitStatus soap_tmp_ns__LeaveWaitStatus;
	soap->encodingStyle = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__LeaveWaitStatus(soap, &soap_tmp_ns__LeaveWaitStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__LeaveWaitStatus(soap, &soap_tmp_ns__LeaveWaitStatus, "ns:LeaveWaitStatus", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__LeaveWaitStatus(soap, &soap_tmp_ns__LeaveWaitStatus, "ns:LeaveWaitStatus", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!dummyOut)
		return soap_closesock(soap);
	soap_default_ns__DummyResponse(soap, dummyOut);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__DummyResponse(soap, dummyOut, "ns:DummyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__GetMetadata(struct soap *soap, const char *soap_endpoint, const char *soap_action, int currentMeasurementNumber, int boardAddress, int blockFrom, int blockTo, ns__MetadataList &metadata)
{	struct ns__GetMetadata soap_tmp_ns__GetMetadata;
	struct ns__GetMetadataResponse *soap_tmp_ns__GetMetadataResponse;
	soap->encodingStyle = "";
	soap_tmp_ns__GetMetadata.currentMeasurementNumber = currentMeasurementNumber;
	soap_tmp_ns__GetMetadata.boardAddress = boardAddress;
	soap_tmp_ns__GetMetadata.blockFrom = blockFrom;
	soap_tmp_ns__GetMetadata.blockTo = blockTo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__GetMetadata(soap, &soap_tmp_ns__GetMetadata);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetMetadata(soap, &soap_tmp_ns__GetMetadata, "ns:GetMetadata", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetMetadata(soap, &soap_tmp_ns__GetMetadata, "ns:GetMetadata", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&metadata)
		return soap_closesock(soap);
	metadata.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__GetMetadataResponse = soap_get_ns__GetMetadataResponse(soap, NULL, "ns:GetMetadataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	metadata = soap_tmp_ns__GetMetadataResponse->metadata;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__GetAllYMetadata(struct soap *soap, const char *soap_endpoint, const char *soap_action, int currentMeasurementNumber, ns__YMetadataList &metadata)
{	struct ns__GetAllYMetadata soap_tmp_ns__GetAllYMetadata;
	struct ns__GetAllYMetadataResponse *soap_tmp_ns__GetAllYMetadataResponse;
	soap->encodingStyle = "";
	soap_tmp_ns__GetAllYMetadata.currentMeasurementNumber = currentMeasurementNumber;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__GetAllYMetadata(soap, &soap_tmp_ns__GetAllYMetadata);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetAllYMetadata(soap, &soap_tmp_ns__GetAllYMetadata, "ns:GetAllYMetadata", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetAllYMetadata(soap, &soap_tmp_ns__GetAllYMetadata, "ns:GetAllYMetadata", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&metadata)
		return soap_closesock(soap);
	metadata.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__GetAllYMetadataResponse = soap_get_ns__GetAllYMetadataResponse(soap, NULL, "ns:GetAllYMetadataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	metadata = soap_tmp_ns__GetAllYMetadataResponse->metadata;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__GetData(struct soap *soap, const char *soap_endpoint, const char *soap_action, int currentMeasurementNumber, ns__DataSpecificationArray requests, ns__Data &data)
{	struct ns__GetData soap_tmp_ns__GetData;
	struct ns__GetDataResponse *soap_tmp_ns__GetDataResponse;
	soap->encodingStyle = "";
	soap_tmp_ns__GetData.currentMeasurementNumber = currentMeasurementNumber;
	soap_tmp_ns__GetData.requests = requests;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__GetData(soap, &soap_tmp_ns__GetData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetData(soap, &soap_tmp_ns__GetData, "ns:GetData", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetData(soap, &soap_tmp_ns__GetData, "ns:GetData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&data)
		return soap_closesock(soap);
	data.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__GetDataResponse = soap_get_ns__GetDataResponse(soap, NULL, "ns:GetDataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	data = soap_tmp_ns__GetDataResponse->data;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__SendServerCustomCommand(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *command, char **result)
{	struct ns__SendServerCustomCommand soap_tmp_ns__SendServerCustomCommand;
	struct ns__SendServerCustomCommandResponse *soap_tmp_ns__SendServerCustomCommandResponse;
	soap->encodingStyle = "";
	soap_tmp_ns__SendServerCustomCommand.command = command;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__SendServerCustomCommand(soap, &soap_tmp_ns__SendServerCustomCommand);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__SendServerCustomCommand(soap, &soap_tmp_ns__SendServerCustomCommand, "ns:SendServerCustomCommand", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__SendServerCustomCommand(soap, &soap_tmp_ns__SendServerCustomCommand, "ns:SendServerCustomCommand", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	*result = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__SendServerCustomCommandResponse = soap_get_ns__SendServerCustomCommandResponse(soap, NULL, "ns:SendServerCustomCommandResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_ns__SendServerCustomCommandResponse->result)
		*result = *soap_tmp_ns__SendServerCustomCommandResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__LoadAutosequence(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__AutoSequence Sequence, char **result)
{	struct ns__LoadAutosequence soap_tmp_ns__LoadAutosequence;
	struct ns__LoadAutosequenceResponse *soap_tmp_ns__LoadAutosequenceResponse;
	soap->encodingStyle = "";
	soap_tmp_ns__LoadAutosequence.Sequence = Sequence;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__LoadAutosequence(soap, &soap_tmp_ns__LoadAutosequence);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__LoadAutosequence(soap, &soap_tmp_ns__LoadAutosequence, "ns:LoadAutosequence", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__LoadAutosequence(soap, &soap_tmp_ns__LoadAutosequence, "ns:LoadAutosequence", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	*result = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__LoadAutosequenceResponse = soap_get_ns__LoadAutosequenceResponse(soap, NULL, "ns:LoadAutosequenceResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_ns__LoadAutosequenceResponse->result)
		*result = *soap_tmp_ns__LoadAutosequenceResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__StartAutoSequence(struct soap *soap, const char *soap_endpoint, const char *soap_action, char **result)
{	struct ns__StartAutoSequence soap_tmp_ns__StartAutoSequence;
	struct ns__StartAutoSequenceResponse *soap_tmp_ns__StartAutoSequenceResponse;
	soap->encodingStyle = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__StartAutoSequence(soap, &soap_tmp_ns__StartAutoSequence);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__StartAutoSequence(soap, &soap_tmp_ns__StartAutoSequence, "ns:StartAutoSequence", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__StartAutoSequence(soap, &soap_tmp_ns__StartAutoSequence, "ns:StartAutoSequence", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	*result = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__StartAutoSequenceResponse = soap_get_ns__StartAutoSequenceResponse(soap, NULL, "ns:StartAutoSequenceResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_ns__StartAutoSequenceResponse->result)
		*result = *soap_tmp_ns__StartAutoSequenceResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__StopAutoSequence(struct soap *soap, const char *soap_endpoint, const char *soap_action, char **result)
{	struct ns__StopAutoSequence soap_tmp_ns__StopAutoSequence;
	struct ns__StopAutoSequenceResponse *soap_tmp_ns__StopAutoSequenceResponse;
	soap->encodingStyle = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__StopAutoSequence(soap, &soap_tmp_ns__StopAutoSequence);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__StopAutoSequence(soap, &soap_tmp_ns__StopAutoSequence, "ns:StopAutoSequence", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__StopAutoSequence(soap, &soap_tmp_ns__StopAutoSequence, "ns:StopAutoSequence", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	*result = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__StopAutoSequenceResponse = soap_get_ns__StopAutoSequenceResponse(soap, NULL, "ns:StopAutoSequenceResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_ns__StopAutoSequenceResponse->result)
		*result = *soap_tmp_ns__StopAutoSequenceResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__GetAutoSequence(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__AutoSequence &result)
{	struct ns__GetAutoSequence soap_tmp_ns__GetAutoSequence;
	struct ns__GetAutoSequenceResponse *soap_tmp_ns__GetAutoSequenceResponse;
	soap->encodingStyle = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__GetAutoSequence(soap, &soap_tmp_ns__GetAutoSequence);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetAutoSequence(soap, &soap_tmp_ns__GetAutoSequence, "ns:GetAutoSequence", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetAutoSequence(soap, &soap_tmp_ns__GetAutoSequence, "ns:GetAutoSequence", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	result.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__GetAutoSequenceResponse = soap_get_ns__GetAutoSequenceResponse(soap, NULL, "ns:GetAutoSequenceResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns__GetAutoSequenceResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__SetDeviceSettings(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__DeviceInfo Settings, struct ns__DummyResponse *dummyOut)
{	struct ns__SetDeviceSettings soap_tmp_ns__SetDeviceSettings;
	soap->encodingStyle = "";
	soap_tmp_ns__SetDeviceSettings.Settings = Settings;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__SetDeviceSettings(soap, &soap_tmp_ns__SetDeviceSettings);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__SetDeviceSettings(soap, &soap_tmp_ns__SetDeviceSettings, "ns:SetDeviceSettings", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__SetDeviceSettings(soap, &soap_tmp_ns__SetDeviceSettings, "ns:SetDeviceSettings", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!dummyOut)
		return soap_closesock(soap);
	soap_default_ns__DummyResponse(soap, dummyOut);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__DummyResponse(soap, dummyOut, "ns:DummyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__GetFreeDiskSpace(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__DiskSpace &DiskSpace)
{	struct ns__GetFreeDiskSpace soap_tmp_ns__GetFreeDiskSpace;
	soap->encodingStyle = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__GetFreeDiskSpace(soap, &soap_tmp_ns__GetFreeDiskSpace);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetFreeDiskSpace(soap, &soap_tmp_ns__GetFreeDiskSpace, "ns:GetFreeDiskSpace", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetFreeDiskSpace(soap, &soap_tmp_ns__GetFreeDiskSpace, "ns:GetFreeDiskSpace", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&DiskSpace)
		return soap_closesock(soap);
	DiskSpace.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	DiskSpace.soap_get(soap, "ns:DiskSpace", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__GetMACAddress(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *IPAddress, ULONG64 &MACAddress)
{	struct ns__GetMACAddress soap_tmp_ns__GetMACAddress;
	struct ns__GetMACAddressResponse *soap_tmp_ns__GetMACAddressResponse;
	soap->encodingStyle = "";
	soap_tmp_ns__GetMACAddress.IPAddress = IPAddress;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__GetMACAddress(soap, &soap_tmp_ns__GetMACAddress);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetMACAddress(soap, &soap_tmp_ns__GetMACAddress, "ns:GetMACAddress", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetMACAddress(soap, &soap_tmp_ns__GetMACAddress, "ns:GetMACAddress", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&MACAddress)
		return soap_closesock(soap);
	soap_default_unsignedLONG64(soap, &MACAddress);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__GetMACAddressResponse = soap_get_ns__GetMACAddressResponse(soap, NULL, "ns:GetMACAddressResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	MACAddress = soap_tmp_ns__GetMACAddressResponse->MACAddress;
	return soap_closesock(soap);
}

/* End of soapClient.cpp */
